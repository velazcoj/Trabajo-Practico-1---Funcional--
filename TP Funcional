-- 1)
data Viajero = Viajero String Int [Recuerdo] [Viaje] deriving (Show,Eq)
data Viaje = Pasado String [String] [Recuerdo] Int | Futuro String [String] Int Int deriving (Show,Eq)
data Recuerdo = Recuerdo String String deriving (Show,Eq)

--Se pide:
--1. Definir las funciones que permitan obtener:
--a. Dado un viajero su nombre,
--b. Dado un viaje, su nombre
--c. Dado un recuerdo, su nombre y el lugar de donde proviene

nombreViajero(Viajero nombre _ _ _) = nombre

nombreLugarViaje(Pasado nombre _ _ _) = nombre
nombreLugarViaje(Futuro nombre _ _ _) = nombre

nombreYLugarRecuerdo (Recuerdo nombre lugar) = (nombre,lugar)

--2. Definir una función que permita obtener los recuerdos y los viajes de un viajero.
recuerdosYViajes(Viajero _ _ recuerdos viajes) = (recuerdos,viajes)

--3. Hacer una función que permita saber si un viaje es interesante. Un viaje es interesante si:
--a. Si el destino del viaje es el lejano oeste
--b. Si es un viaje al pasado y el viajero se puede traer más de 5 recuerdos
--c. Todos los viajes al futuro son interesantes.
esInteresante (Pasado _ _ listaRecuerdos _) = length listaRecuerdos > 5                          
esInteresante (Pasado "Lejano Oeste" _ _ _) = True                                                          
esInteresante (Futuro _ _ _ _) = True

--4. Hacer una función que dada una lista de viajes, permita mostrar los nombres y los años de todos los viajes que son interesantes.
nombresYAniosViajes (Pasado lugarviaje _ _ anio) = (lugarviaje,anio)
nombresYAniosViajes (Futuro lugarviaje _ _ anio) = (lugarviaje,anio)
nombresYAniosDeViajesInteresantes viajes = map nombresYAniosViajes (filter esInteresante viajes)
  

--5. Hacer una función que dada una lista de viajes, un año inicio y un año fin, se pueda obtener cuáles son los nombres y el año de todos los viajes entre dos años que están en el rango pasado por parámetro.
viajesEntreAnios listaViajes anioInicio anioFin = map nombresYAniosViajes (filter (\viaje -> snd (nombresYAniosViajes viaje) >= anioInicio && snd (nombresYAniosViajes viaje) <= anioFin) listaViajes)

--6 

edadViajero (Viajero _ edad _ _) = edad
recuerdosViajero (Viajero _ _ [] _) = []
recuerdosViajero (Viajero _ _ recuerdos _) = recuerdos
viajesViajero (Viajero _ _ _ []) = []
viajesViajero (Viajero _ _ _ viajes) = viajes
incrementarEdad viajero incremento = Viajero (nombreViajero viajero) (edadViajero viajero + incremento) (recuerdosViajero viajero) (viajesViajero viajero)

ganarUnAnio viajero = incrementarEdad viajero 1
ganarUnaDecada viajero = incrementarEdad viajero 10


vocales = ["A","E","I","O","U","a","e","i","o","u"]
empiezaEnVocal palabra = elem (take 1 palabra) vocales
lugarRecuerdo recuerdo = snd (nombreYLugarRecuerdo recuerdo)
recuerdosSinVocal recuerdos = filter ((not.empiezaEnVocal).lugarRecuerdo) recuerdos
recuerdosSinConsonante recuerdos = filter ((empiezaEnVocal).lugarRecuerdo) recuerdos


perderRecuerdosConVocal viajero = Viajero (nombreViajero viajero) (edadViajero viajero) (recuerdosSinVocal (recuerdosViajero viajero)) (viajesViajero viajero)
perderRecuerdosConConsonante viajero = Viajero (nombreViajero viajero) (edadViajero viajero) (recuerdosSinConsonante (recuerdosViajero viajero)) (viajesViajero viajero)


agregarViajes [] nuevosViajes = nuevosViajes
agregarViajes (viaje:viajes) nuevosViajes = viaje : agregarViajes viajes nuevosViajes
agregarViajesAViajero viajero viajes = agregarViajes (viajesViajero viajero) viajes

transformacionesViaje (Pasado _ [] _ _) = []
transformacionesViaje (Pasado _ transformaciones _ _) = transformaciones
transformacionesViaje (Futuro _ transformaciones _ _) = transformaciones
aplicarTransformacion viajero transformacion = transformacion viajero

recuerdosDeViaje (Pasado _ _ [] _) = []
recuerdosDeViaje (Pasado _ _ recuerdos _) = recuerdos
recuerdosDeViaje (Futuro _ _ _ _) = []

viajarYObtenerRecuerdos viajero viajes = map recuerdosDeViaje (agregarViajesAViajero viajero viajes)


--7. Hacer la función estadística que reciba una función de condición, una función de transformación y una lista. Luego, usarla para resolver las siguientes consultas:
--a. Dada una lista, encontrar todos los nombres de los viajes que tienen más de 3 transformaciones.
--b. Dada una lista de viajes, obtener la suma de todos los años luz que suman
--c. Dada una lista, obtener los nombres de todos los viajes. Tener en cuenta que los viajes al pasado no suman años luz.
--Nota: sólo se puede hacer la función estadística y usar la misma en forma de consulta en los puntos a, b y c. No se pueden usar funciones

estadistica condicion transformacion lista = map transformacion (filter condicion lista)

--consulta A
-- estadistica ((>3).length).transformaciones nombreLugarViaje [viajePasado,viajeFuturo,viajeAChina]

transformaciones (Futuro _ transformacion _ _) = transformacion
transformaciones (Pasado _ transformacion _ _) = transformacion

--consulta B
-- sum (estadistica esViajeFuturo (\(Futuro _ _ _ aniosLuz) -> aniosLuz) [viajePasado, viajeFuturo, viajeAChina, viajePrueba])

esViajeFuturo (Pasado _ _ _ _) = False
esViajeFuturo (Futuro _ _ _ _) = True

--consulta C
-- estadistica (\viaje -> True) nombreLugarViaje [viajePasado, viajeFuturo, viajeAChina, viajeDeAmigos]

viajero1 = Viajero "Pedro" 35 [] []
viajero2 = Viajero "Carlos" 19 [] []
marty = Viajero "Marty McFly" 17 [recuerdoBaile,recuerdoPersecucion,recuerdoTiburon] [viajePasado,viajeFuturo,viajeAChina]
doc = Viajero "Dr Emmet Brown" 65 [] [viajePasado,viajeFuturo,viajeAChina]

recuerdoBaile = Recuerdo "Baile del encanto bajo el oceano" "Escuela Secundaria"
recuerdoPersecucion = Recuerdo "Persecucion con Biff" "Autopista"
recuerdoTiburon = Recuerdo "Holograma de Jaws 19" "Plaza"
recuerdoPartido = Recuerdo "Partido entre amigos" "Cancha de independiente"
recuerdoChoque = Recuerdo "Choque Automovilistico" "Ruta 11"
recuerdoHamburguesa = Recuerdo "Hamburguesa triple" "Burger King"

viajePasado = Pasado "Marte" [] [] 1950
viajeFuturo = Futuro "Luna" [] 300 2010
viajeAChina = Futuro "China" [] 100 1985
viajePrueba = Pasado "Lejano Oeste" [] [] 2005
viajeDeAmigos = Pasado "Tokyo" [] [recuerdoBaile,recuerdoPersecucion,recuerdoTiburon, recuerdoChoque, recuerdoHamburguesa, recuerdoPartido] 1930





